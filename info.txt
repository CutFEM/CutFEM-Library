Boundary label default

     3
   ------
  |      |
4 |      | 2
  |      |
   ------
     1


---------------------------------------------------------------------
Object TestFunction<d>

Consturctor :
TestFunction(int dim, int comp0, int dom)
- dim : dimension of the test function ( default = 1)
- comp0 : where it starts in the space (default = 0)
- dom : for cutFEM, what subdomain (default = -1 => operate on all subdomains)

Examples :
1) Stokes 2D => u(2), p(1,2)
2) Integrate only on domain 0 => u(d,0,0), p(1,d,0)

Operation on test TestFunction :
Let u be a TestFunction.
i) transpose : u.t(); (vector or scalar)
ii) gradient : grad(u); (vector or scalar)
iii) strain tensor : Eps(u); (vector)
iv) multiply by  normal or tangent : u.t()*n, u.t()*t (vector or scalar)
remark: n and t has to be defined before (  Normal n; Tangent t;)
v) jump : jump(u);
vi) average1 : average1(u) => uK*kappa1 + uKn*kappa2 or u1*kappa1 + u2*kappa2
vii) average2 : average2(u) => uK*kappa2 + uKn*kappa1 or u1*kappa2 + u2*kappa1
remark: kappa1 = kappa2 = 0.5 by default.
        You can set the kappa as follow :
        Parameter::kappa1.set(val);
        Parameter::kappa2.set(val);
Example :
1) FunTest Eun = (Eps(u)*n);
2) FunTest un = (u.t()*n);

---------------------------------------------------------------------
Object CutFEM_Parameter

Constructor :
CutFEM_Parameter(std::string name, double value)
CutFEM_Parameter(std::string name, double value1, double value2)

Some parameters depends on the element we integrate on. Such parameters has to be defined beforehand.
Defined parameters :
- h => max length of the edges in the consider element
- invh => 1./h
- lambdaG = (kappa1*mu1 + kappa2*mu2)*(100 + 10*gamma)/(h*h)
with mu1 = mu2 = 1 if not defined by user
with kappa1 and kappa2 = 0.5 if mu_i not defined or kappa_i not defined
with gamma = meas / h;
- lambdaB = 10/h^2
-kappa1 = 0.5 or mu2/(mu1+mu2)
-kappa2 = 0.5 or mu1/(mu1+mu2)

The default values can be changed just by redefining a variable.

Examples :
1) CutFEM_Parameter tetha("tetha",0.3, 0.7); //create a parameter
2) Parameter::h.set(0.1);  // set a value to an existing Cparameter


---------------------------------------------------------------------
Object ListItemVF

This object contains the list of the operations in your variational formulation.

Constructor
It has to be created for operation on test function.

Example :
1) ListItemVF ah = contractProduct(2*mu_*Eps(u),Eps(v))
                   - innerProduct(p, div(v))
                   + innerProduct(div(u), q);
2) ListItemVF lh = innerProduct(fh, v);
with fh a FunFEM object.

List of operation that  create a ListItemVF :
i) innerProduct : between 2 vectors (or scalar)
ii) contractProduct : between 2 matrices



---------------------------------------------------------------------
Class FEM

This class is used to define a FEM problem.

Constructor :
BaseProblem(const FESpace& Vh)
- Vh is a finiteElement space (not cut!!)

Methods :
1) void addBilinearFormOmega(const ListItemVF& VF);
integrate a list of item on Omega to assemble the matrix
2)void addLinearFormOmega(const ListItemVF& VF);
integrate a list of item on Omega to assemble the rhs
3)void addBilinearFormBorder(const ListItemVF& VF, int lab = 0);
integrate a list of item on the boundary with label=lab to assemble the matrix
4) void addLinearFormBorder(const ListItemVF& VF, int lab = 0);
integrate a list of item on the boundary with label=lab to assemble the rhs
5) void addLagrangeMultiplier(const ListItemVF& VF, double val)
Will add a line and column in the matrix to add the integral given and add the value
to an extra line in the rhs.
6) void addEdgeIntegral(const ListItemVF& VF)
integral on edges ( NOT BOUNDARY ONE)
